const executeSwap = async () => {
  if (!signer || !fromAmount || !hasAllowance) return;
  
  setIsSwapping(true);
  try {
    const fromTokenInfo = TOKENS[fromToken as keyof typeof TOKENS];
    const toTokenInfo = TOKENS[toToken as keyof typeof TOKENS];
    
    // Convert to proper token units (wei for PRIOR, micro-units for USDC/USDT)
    const amountInWei = ethers.utils.parseUnits(fromAmount, fromTokenInfo.decimals);
    
    // Get the appropriate swap contract address
    const swapContractAddress = getSwapContractAddress(fromToken, toToken);
    if (!swapContractAddress) {
      throw new Error(`No swap contract available for ${fromToken}-${toToken} pair`);
    }

    // Create contract instance
    const swapContract = new ethers.Contract(
      swapContractAddress,
      [
        "function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external returns (uint256[] memory amounts)"
      ],
      signer
    );

    // Set up swap path
    const path = [fromTokenInfo.address, toTokenInfo.address];
    const deadline = Math.floor(Date.now() / 1000) + 60 * 20; // 20 minutes
    
    // Calculate minimum amount out with slippage
    const minAmountOut = parseFloat(toAmount) * (1 - (slippage / 100));
    const minAmountOutWei = ethers.utils.parseUnits(minAmountOut.toString(), toTokenInfo.decimals);

    // Execute swap
    const tx = await swapContract.swapExactTokensForTokens(
      amountInWei,
      minAmountOutWei,
      path,
      directAddress || address,
      deadline
    );

    const receipt = await tx.wait();
    setTxHash(receipt.transactionHash);

    // Refresh balances after 5 seconds to allow for blockchain update
    setTimeout(async () => {
      await loadBalances(directAddress || address || "");
    }, 5000);

    toast({
      title: "Swap Successful",
      description: `Swapped ${fromAmount} ${fromToken} for ${toAmount} ${toToken}`,
    });

    setFromAmount("");
    setToAmount("0");
  } catch (error: any) {
    console.error("Swap error:", error);
    toast({
      title: "Swap Failed",
      description: error.reason || error.message || "Unknown error",
      variant: "destructive"
    });
  } finally {
    setIsSwapping(false);
  }
};