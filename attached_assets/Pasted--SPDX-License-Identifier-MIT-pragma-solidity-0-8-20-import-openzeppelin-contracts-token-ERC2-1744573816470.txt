// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract PriorToken is ERC20, Ownable, ReentrancyGuard {
    uint256 public constant MAX_SUPPLY = 800_000_000 * 10**18;
    uint256 public constant STAKING_REWARD_RATE = 10; // 10% annual
    
    struct Stake {
        uint256 amount;
        uint256 startTime;
    }
    
    mapping(address => Stake) public stakes;
    uint256 public totalStaked;
    
    constructor(address initialOwner) 
        ERC20("Prior Token", "PRIOR") 
        Ownable(initialOwner) 
    {
        _mint(initialOwner, MAX_SUPPLY);
    }
    
    function mint(address to, uint256 amount) public onlyOwner {
        require(totalSupply() + amount <= MAX_SUPPLY, "Exceeds max supply");
        _mint(to, amount);
    }
    
    function calculateRewards(address user) public view returns (uint256) {
        if (stakes[user].amount == 0) return 0;
        uint256 stakingDuration = block.timestamp - stakes[user].startTime;
        uint256 annualReward = (stakes[user].amount * STAKING_REWARD_RATE) / 100;
        return (annualReward * stakingDuration) / 365 days;
    }
    
    function claimRewards() public nonReentrant {
        uint256 reward = calculateRewards(msg.sender);
        if (reward > 0) {
            _mint(msg.sender, reward);
            stakes[msg.sender].startTime = block.timestamp;
        }
    }
    
    function stake(uint256 amount) external nonReentrant {
        require(amount > 0, "Amount must be > 0");
        require(balanceOf(msg.sender) >= amount, "Insufficient balance");
        
        if (stakes[msg.sender].amount > 0) {
            claimRewards();
        }
        
        _transfer(msg.sender, address(this), amount);
        stakes[msg.sender].amount += amount;
        stakes[msg.sender].startTime = block.timestamp;
        totalStaked += amount;
    }
    
    function unstake(uint256 amount) external nonReentrant {
        require(amount > 0, "Amount must be > 0");
        require(stakes[msg.sender].amount >= amount, "Insufficient staked");
        
        claimRewards();
        stakes[msg.sender].amount -= amount;
        totalStaked -= amount;
        _transfer(address(this), msg.sender, amount);
    }
}